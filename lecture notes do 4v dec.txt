|   Image Descriptors   |
"======================="
 
 2D feeatures
 
 HOG, SIFT
 
 
 simplest image descriptor: the pixels themselves
 
 
 image stitching
	handy for panoramas

	slight differences in rotation, position, lighting, scale, etc.
 
 
 object detection
	classification
	identification ( / "verification" ?)
 
	recognition
	detection (finding the location in the image)
	segmentation (which pixels exactly fall under the object)
 
 duplication detection
	finding two the same images (apart from scaling, lighting, etc.)
	or videos (for copyright infringement)

 face verification
	= identification
	
 --------------------------------------------------
 
 viewpoint
	2d modifications:
	rotation, affine transformations
 
	affine transformations:
		scaling, skewing, translation
		
	perspective transformations
 
 lighting
	direct light vs ambient light
	...more

image quality
	compression artifacts
	resolution
	
object articulation
	moveable parts, deformable parts
 
 ------------------------------------------------------------
 
 low-level image descriptors  |
 -----------------------------+
 
 based on
	color
	edges
	motion => video
.

contrast edges
	pixel = edge pixel or not

	have strength and orientation
 
	based on illumination only 
		==> invariant to color or color contrast!
 
	derivatives : difference between two adjacent pixels
	G_x and G_y
	
	Prewitt kernel
	      |-1 0 1|
	G_x = |-1 0 1| * A           ==> convolution over image A!
          |-1 0 1|
		   
	pixels on both sides of the contrast are labelled as contrast pixels

	Sobel kernel
 	      |-1 0 1|
	G_x = |-2 0 2| * A           ==> convolution over image A!
          |-1 0 1|
		   
	gradient strength: 
		G = sqrt(G_x^2 + G_y^2)
 
	gradient orientation:  (normal on edge, poiting from low intensity values to high values)
		= atan2(G_y, G_x)
 
 
	Gaussian filter / Gaussian blur:
		compute kernel of (for example) 5x5 from gaussian distribution with a given variance
		convolute kernel over image
 
		noisy pixels get averaged
		details get lost
 
 
	Canny edge detection
		1) apply Gaussian blur
		2) calculate gradient strengths and orientations
		3) apply threshold (?)
		4) trace edges
		
		suppression:
		suppress the non-maximal magnitude pixels along the gradient (orthogonal to edge)
	
		tracing:
		follow edge (orthogonal to gradient)
		calculate length of path
		remove shorter paths
		
		
		
		
		
		
		
		
		
===================================================================
|  Histogram of Oriented Gradients (HOG)  |
"========================================="
invariant to scale (?!?!)
	, rotation, illumination, color

1) apply gaussian filter
   + normalize color (undiscussed...)
2) calculate edge magnitude and orientatino
3) summarize values within each cell of grid
4) summarize over 2x2 blocks of grid (with overlap!)
5) convolute over image

summarize orientation:
	histogram of orientation angle bins 
	map angle to between 0-180 degrees (we dont care whether the gradient is from light to dark or other way around!)
	
	because vertical and horizontal are interesting, map to range 11.25 -- 180+11.25
	\  /
	 \/_
	  \
	   \
	pixels add their magnitude to the bin off their orientation
	
	add up histograms within block
		+ normalize bins to sum to one
	
	
	
	
	
=================================================
 Scale Invarient Feature Transform (SIFT)
===================================================

invarient to scale, rotation, translation, perspective

1) detect scale-space extrema
2) detect keypoints
3) determine orientation
4) 


at different scalings of the image: 1/2, 1/4 , 1/8 ...
	apply different levels of gaussian blur
	compute difference between subsequent blurrings ==> gives details, filters out large scale features

see slides!!











 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 